-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("✅ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("❌ Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch 🥚")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("🥚 Hatched:", eggName)
        Library:Notify("🥚 Hatched: " .. eggName, 2)
        return true
    else
        print("❌ PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("⚠️ Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("🥚 Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("🥚 Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("🥚 Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("🦕 Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("🥚 All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- MUTATION SYSTEM
-- ================================================================
local MutationGroupBox = EventTab:AddLeftGroupbox("Mutation 🧬")

-- Variables for Mutation system
local AutoSubmitPetEnabled = false
local autoSubmitPetConnection = nil
local isSubmittingPets = false
local SelectedPetsForMutation = {}

-- Complete list of all non-dino pets from the game (excluding dino pets)
local AllNonDinoPets = {
    -- Basic Pets
    "Dog",
    "Golden Lab",
    "Bunny",
    "Black Bunny",
    "Cat",
    "Orange Tabby",
    "Deer",
    "Spotted Deer",
    "Monkey",
    "Silver Monkey",
    "Chicken",
    "Rooster",
    "Pig",
    "Turtle",
    "Cow",

    -- Rare & Mythical Pets
    "Snail",
    "Giant Ant",
    "Dragonfly",
    "Polar Bear",
    "Panda",
    "Sea Otter",
    "Caterpillar",
    "Praying Mantis",
    "Hedgehog",
    "Kiwi",
    "Mole",
    "Frog",
    "Echo Frog",
    "Owl",
    "Night Owl",
    "Raccoon",
    "Grey Mouse",
    "Squirrel",
    "Brown Mouse",
    "Red Giant Ant",
    "Red Fox",

    -- Event/Special Pets
    "Chicken Zombie",
    "Blood Hedgehog",
    "Blood Kiwi",
    "Blood Owl",
    "Moon Cat",

    -- Flying/Bee Pets
    "Bee",
    "Honey Bee",
    "Petal Bee",
    "Golden Bee",
    "Bear Bee",
    "Queen Bee",
    "Wasp",
    "Tarantula Hawk",
    "Moth",
    "Butterfly",
    "Disco Bee",
    "Pack Bee",

    -- Other Flying Pets
    "Firefly",
    "Red Dragon",
    "Cooked Owl",

    -- Aquatic Pets
    "Starfish",
    "Crab",
    "Seagull",
    "Toucan",
    "Flamingo",
    "Sea Turtle",
    "Seal",

    -- Land Animals
    "Orangutan",
    "Peacock",
    "Capybara",
    "Scarlet Macaw",
    "Ostrich",
    "Mimic Octopus",
    "Meerkat",
    "Sand Snake",
    "Axolotl",
    "Hyacinth Macaw",
    "Fennec Fox",
    "Hamster",
}

-- Get the PetMutationMachineService remote
local PetMutationMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetMutationMachineService_RE")

-- Function to check if a pet name matches any selected pets
local function isPetSelected(petName)
    if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
        return false -- If no pets selected, don't submit any
    end
    
    -- Check exact matches first
    if SelectedPetsForMutation[petName] then
        return true
    end
    
    -- Check partial matches (in case pet names in inventory have prefixes/suffixes)
    for selectedPet, isSelected in pairs(SelectedPetsForMutation) do
        if isSelected then
            if string.find(petName, selectedPet) or string.find(selectedPet, petName) then
                return true
            end
        end
    end
    
    return false
end

-- Function to get selected pets in inventory with level 50 or above
local function getSelectedEligiblePetsForMutation()
    local eligiblePets = {}
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    
    if not backpack then
        return eligiblePets
    end
    
    -- Check all tools in backpack for selected pets with age 50+
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- Check if it's a selected pet and has age 50+
            local petAge = tool:GetAttribute("Age")
            
            if petAge and tonumber(petAge) and tonumber(petAge) >= 50 then
                -- Check if this pet is in our selected list
                if isPetSelected(tool.Name) then
                    table.insert(eligiblePets, tool)
                    print("🧬 Found selected eligible pet:", tool.Name, "- Age:", petAge)
                end
            elseif isPetSelected(tool.Name) then
                print("🧬 Found selected pet but age too low:", tool.Name, "- Age:", petAge or "unknown")
            end
        end
    end
    
    return eligiblePets
end

-- Function to equip a specific pet tool
local function equipPet(petTool)
    local success, result = pcall(function()
        -- Make sure we have a character
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then
            return false
        end
        
        -- Check if pet is still in backpack
        if not petTool or not petTool.Parent or petTool.Parent ~= LocalPlayer.Backpack then
            return false
        end
        
        -- Equip the pet
        LocalPlayer.Character.Humanoid:EquipTool(petTool)
        print("🧬 Equipped pet:", petTool.Name)
        
        -- Wait a moment for the equip to register
        task.wait(0.5)
        
        -- Verify pet is actually equipped
        local equippedPet = LocalPlayer.Character:FindFirstChild(petTool.Name)
        if equippedPet then
            return true
        else
            return false
        end
    end)
    
    if not success then
        print("❌ Error equipping pet:", result)
        return false
    end
    
    return result
end

-- Function to submit the currently held pet
local function submitHeldPet()
    local success, result = pcall(function()
        if not PetMutationMachineService_RE then
            print("❌ PetMutationMachineService_RE not found!")
            return false
        end
        
        -- Check if we have a pet equipped
        local equippedPet = nil
        if LocalPlayer.Character then
            equippedPet = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        end
        
        if not equippedPet then
            print("📭 No pet equipped to submit")
            return false
        end
        
        -- Submit the held pet
        PetMutationMachineService_RE:FireServer("SubmitHeldPet")
        print("🧬 Submitted pet:", equippedPet.Name)
        Library:Notify("🧬 Submitted pet: " .. equippedPet.Name, 2)
        
        return true
    end)
    
    if not success then
        print("❌ Error submitting pet:", result)
        return false
    end
    
    return result
end

-- Function to unequip current pet (move back to backpack)
local function unequipCurrentPet()
    local success, result = pcall(function()
        if not LocalPlayer.Character then
            return true
        end
        
        local equippedPet = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        if equippedPet then
            -- Move pet back to backpack
            equippedPet.Parent = LocalPlayer.Backpack
            print("🧬 Unequipped pet:", equippedPet.Name)
            task.wait(0.3) -- Wait for unequip to register
        end
        
        return true
    end)
    
    return success and result
end

-- Main function to auto submit selected eligible pets
local function performAutoSubmitSelectedPets()
    if not AutoSubmitPetEnabled or isSubmittingPets then
        return
    end
    
    -- Check if any pets are selected
    if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
        local currentTime = tick()
        if not _G.LastPetSelectionCheck or currentTime - _G.LastPetSelectionCheck > 30 then
            print("📭 No pets selected for mutation")
            _G.LastPetSelectionCheck = currentTime
        end
        return
    end
    
    isSubmittingPets = true
    
    local success, result = pcall(function()
        -- Get selected eligible pets (age 50+ and in selection)
        local eligiblePets = getSelectedEligiblePetsForMutation()
        
        if #eligiblePets == 0 then
            -- Only notify every 30 seconds to avoid spam
            local currentTime = tick()
            if not _G.LastSelectedPetMutationCheck or currentTime - _G.LastSelectedPetMutationCheck > 30 then
                print("📭 No selected pets with age 50+ found for mutation")
                _G.LastSelectedPetMutationCheck = currentTime
            end
            return false
        end
        
        print("🧬 Found " .. #eligiblePets .. " selected eligible pets for mutation")
        Library:Notify("🧬 Found " .. #eligiblePets .. " selected pets ready for mutation!", 2)
        
        local submittedCount = 0
        
        -- Process each eligible pet
        for i, petTool in pairs(eligiblePets) do
            if not AutoSubmitPetEnabled then
                break
            end
            
            print("🧬 Processing selected pet " .. i .. "/" .. #eligiblePets .. ":", petTool.Name)
            
            -- Unequip any currently equipped pet first
            unequipCurrentPet()
            task.wait(0.5)
            
            -- Equip the pet
            local equipped = equipPet(petTool)
            if equipped then
                task.wait(0.5) -- Wait for equip to fully register
                
                -- Submit the pet
                local submitted = submitHeldPet()
                if submitted then
                    submittedCount = submittedCount + 1
                    task.wait(1) -- Wait between submissions
                else
                    print("❌ Failed to submit pet:", petTool.Name)
                end
            else
                print("❌ Failed to equip pet:", petTool.Name)
            end
            
            -- Small delay between pets
            task.wait(0.5)
        end
        
        if submittedCount > 0 then
            Library:Notify("🧬 Successfully submitted " .. submittedCount .. " selected pets for mutation!", 3)
        end
        
        return true
    end)
    
    if not success then
        print("❌ Error in auto submit selected pets:", result)
    end
    
    isSubmittingPets = false
end

-- Pet Selection Dropdown
MutationGroupBox:AddDropdown("MutationPetSelection", {
    Values = AllNonDinoPets,
    Default = {},
    Multi = true,
    Text = "Select Pets to Submit",
    Tooltip = "Choose which pets to automatically submit for mutation when they reach age 50+",
    
    Callback = function(Value)
        SelectedPetsForMutation = Value
        
        local selectedCount = 0
        for _, selected in pairs(Value) do
            if selected then selectedCount = selectedCount + 1 end
        end
        
        if selectedCount > 0 then
            Library:Notify("🧬 Selected " .. selectedCount .. " pets for mutation", 2)
        else
            Library:Notify("🧬 No pets selected for mutation", 2)
        end
        
        print("[cb] Selected pets for mutation:", selectedCount)
    end,
})

-- Auto Submit Pet toggle
MutationGroupBox:AddToggle("AutoSubmitPet", {
    Text = "Auto Submit Selected Pets",
    Tooltip = "Automatically submit selected pets with age 50+ to mutation machine",
    Default = false,
    Callback = function(Value)
        AutoSubmitPetEnabled = Value
        print("[cb] Auto Submit Selected Pets toggled:", Value)
        
        if Value then
            if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
                Library:Notify("⚠️ Please select pets first using the dropdown above!", 4)
                Toggles.AutoSubmitPet:SetValue(false)
                return
            end
            
            local selectedCount = 0
            for _, selected in pairs(SelectedPetsForMutation) do
                if selected then selectedCount = selectedCount + 1 end
            end
            
            Library:Notify("🧬 Auto submit enabled for " .. selectedCount .. " selected pets (age 50+)!", 3)
            
            -- Start auto submit loop (check every 5 seconds)
            autoSubmitPetConnection = task.spawn(function()
                while AutoSubmitPetEnabled do
                    performAutoSubmitSelectedPets()
                    task.wait(5) -- Wait 5 seconds between checks
                end
            end)
        else
            Library:Notify("🧬 Auto submit selected pets disabled!", 3)
            
            -- Stop auto submit loop
            if autoSubmitPetConnection then
                task.cancel(autoSubmitPetConnection)
                autoSubmitPetConnection = nil
            end
            
            -- Reset submitting flag
            isSubmittingPets = false
        end
    end,
})

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("🎉 Event Tab initialized successfully!")
Library:Notify("🥚 AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
