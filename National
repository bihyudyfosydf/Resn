-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("✅ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("❌ Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch 🥚")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("🥚 Hatched:", eggName)
        Library:Notify("🥚 Hatched: " .. eggName, 2)
        return true
    else
        print("❌ PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("⚠️ Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("🥚 Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("🥚 Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("🥚 Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("🦕 Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("🥚 All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- MUTATION SYSTEM
-- ================================================================
local MutationGroupBox = EventTab:AddLeftGroupbox("Mutation 🧬")

-- Variables for Mutation system
local AutoSubmitPetEnabled = false
local autoSubmitPetConnection = nil
local isSubmittingPets = false
local SelectedPetsForMutation = {}

-- Complete list of all non-dino pets from the game (excluding dino pets)
local AllNonDinoPets = {
    -- Basic Pets
    "Dog",
    "Golden Lab",
    "Bunny",
    "Black Bunny",
    "Cat",
    "Orange Tabby",
    "Deer",
    "Spotted Deer",
    "Monkey",
    "Silver Monkey",
    "Chicken",
    "Rooster",
    "Pig",
    "Turtle",
    "Cow",

    -- Rare & Mythical Pets
    "Snail",
    "Giant Ant",
    "Dragonfly",
    "Polar Bear",
    "Panda",
    "Sea Otter",
    "Caterpillar",
    "Praying Mantis",
    "Hedgehog",
    "Kiwi",
    "Mole",
    "Frog",
    "Echo Frog",
    "Owl",
    "Night Owl",
    "Raccoon",
    "Grey Mouse",
    "Squirrel",
    "Brown Mouse",
    "Red Giant Ant",
    "Red Fox",

    -- Event/Special Pets
    "Chicken Zombie",
    "Blood Hedgehog",
    "Blood Kiwi",
    "Blood Owl",
    "Moon Cat",

    -- Flying/Bee Pets
    "Bee",
    "Honey Bee",
    "Petal Bee",
    "Golden Bee",
    "Bear Bee",
    "Queen Bee",
    "Wasp",
    "Tarantula Hawk",
    "Moth",
    "Butterfly",
    "Disco Bee",
    "Pack Bee",

    -- Other Flying Pets
    "Firefly",
    "Red Dragon",
    "Cooked Owl",

    -- Aquatic Pets
    "Starfish",
    "Crab",
    "Seagull",
    "Toucan",
    "Flamingo",
    "Sea Turtle",
    "Seal",

    -- Land Animals
    "Orangutan",
    "Peacock",
    "Capybara",
    "Scarlet Macaw",
    "Ostrich",
    "Mimic Octopus",
    "Meerkat",
    "Sand Snake",
    "Axolotl",
    "Hyacinth Macaw",
    "Fennec Fox",
    "Hamster",
}

-- Get the PetMutationMachineService remote
local PetMutationMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetMutationMachineService_RE")

-- Function to check if a pet name matches any selected pets
local function isPetSelected(petName)
    if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
        return false -- If no pets selected, don't submit any
    end
    
    -- Check exact matches first
    if SelectedPetsForMutation[petName] then
        return true
    end
    
    -- Check partial matches (in case pet names in inventory have prefixes/suffixes)
    for selectedPet, isSelected in pairs(SelectedPetsForMutation) do
        if isSelected then
            if string.find(petName, selectedPet) or string.find(selectedPet, petName) then
                return true
            end
        end
    end
    
    return false
end

-- Function to get selected pets in inventory with level 50 or above
local function getSelectedEligiblePetsForMutation()
    local eligiblePets = {}
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    
    if not backpack then
        return eligiblePets
    end
    
    -- Check all tools in backpack for selected pets with age 50+
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- Check if it's a selected pet and has age 50+
            local petAge = tool:GetAttribute("Age")
            
            if petAge and tonumber(petAge) and tonumber(petAge) >= 50 then
                -- Check if this pet is in our selected list
                if isPetSelected(tool.Name) then
                    table.insert(eligiblePets, tool)
                    print("🧬 Found selected eligible pet:", tool.Name, "- Age:", petAge)
                end
            elseif isPetSelected(tool.Name) then
                print("🧬 Found selected pet but age too low:", tool.Name, "- Age:", petAge or "unknown")
            end
        end
    end
    
    return eligiblePets
end

-- Function to equip a specific pet tool
local function equipPet(petTool)
    local success, result = pcall(function()
        -- Make sure we have a character
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then
            return false
        end
        
        -- Check if pet is still in backpack
        if not petTool or not petTool.Parent or petTool.Parent ~= LocalPlayer.Backpack then
            return false
        end
        
        -- Equip the pet
        LocalPlayer.Character.Humanoid:EquipTool(petTool)
        print("🧬 Equipped pet:", petTool.Name)
        
        -- Wait a moment for the equip to register
        task.wait(0.5)
        
        -- Verify pet is actually equipped
        local equippedPet = LocalPlayer.Character:FindFirstChild(petTool.Name)
        if equippedPet then
            return true
        else
            return false
        end
    end)
    
    if not success then
        print("❌ Error equipping pet:", result)
        return false
    end
    
    return result
end

-- Function to submit the currently held pet
local function submitHeldPet()
    local success, result = pcall(function()
        if not PetMutationMachineService_RE then
            print("❌ PetMutationMachineService_RE not found!")
            return false
        end
        
        -- Check if we have a pet equipped
        local equippedPet = nil
        if LocalPlayer.Character then
            equippedPet = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        end
        
        if not equippedPet then
            print("📭 No pet equipped to submit")
            return false
        end
        
        -- Submit the held pet
        PetMutationMachineService_RE:FireServer("SubmitHeldPet")
        print("🧬 Submitted pet:", equippedPet.Name)
        Library:Notify("🧬 Submitted pet: " .. equippedPet.Name, 2)
        
        return true
    end)
    
    if not success then
        print("❌ Error submitting pet:", result)
        return false
    end
    
    return result
end

-- Function to unequip current pet (move back to backpack)
local function unequipCurrentPet()
    local success, result = pcall(function()
        if not LocalPlayer.Character then
            return true
        end
        
        local equippedPet = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        if equippedPet then
            -- Move pet back to backpack
            equippedPet.Parent = LocalPlayer.Backpack
            print("🧬 Unequipped pet:", equippedPet.Name)
            task.wait(0.3) -- Wait for unequip to register
        end
        
        return true
    end)
    
    return success and result
end

-- Main function to auto submit selected eligible pets
local function performAutoSubmitSelectedPets()
    if not AutoSubmitPetEnabled or isSubmittingPets then
        return
    end
    
    -- Check if any pets are selected
    if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
        local currentTime = tick()
        if not _G.LastPetSelectionCheck or currentTime - _G.LastPetSelectionCheck > 30 then
            print("📭 No pets selected for mutation")
            _G.LastPetSelectionCheck = currentTime
        end
        return
    end
    
    isSubmittingPets = true
    
    local success, result = pcall(function()
        -- Get selected eligible pets (age 50+ and in selection)
        local eligiblePets = getSelectedEligiblePetsForMutation()
        
        if #eligiblePets == 0 then
            -- Only notify every 30 seconds to avoid spam
            local currentTime = tick()
            if not _G.LastSelectedPetMutationCheck or currentTime - _G.LastSelectedPetMutationCheck > 30 then
                print("📭 No selected pets with age 50+ found for mutation")
                _G.LastSelectedPetMutationCheck = currentTime
            end
            return false
        end
        
        print("🧬 Found " .. #eligiblePets .. " selected eligible pets for mutation")
        Library:Notify("🧬 Found " .. #eligiblePets .. " selected pets ready for mutation!", 2)
        
        local submittedCount = 0
        
        -- Process each eligible pet
        for i, petTool in pairs(eligiblePets) do
            if not AutoSubmitPetEnabled then
                break
            end
            
            print("🧬 Processing selected pet " .. i .. "/" .. #eligiblePets .. ":", petTool.Name)
            
            -- Unequip any currently equipped pet first
            unequipCurrentPet()
            task.wait(0.5)
            
            -- Equip the pet
            local equipped = equipPet(petTool)
            if equipped then
                task.wait(0.5) -- Wait for equip to fully register
                
                -- Submit the pet
                local submitted = submitHeldPet()
                if submitted then
                    submittedCount = submittedCount + 1
                    task.wait(1) -- Wait between submissions
                else
                    print("❌ Failed to submit pet:", petTool.Name)
                end
            else
                print("❌ Failed to equip pet:", petTool.Name)
            end
            
            -- Small delay between pets
            task.wait(0.5)
        end
        
        if submittedCount > 0 then
            Library:Notify("🧬 Successfully submitted " .. submittedCount .. " selected pets for mutation!", 3)
        end
        
        return true
    end)
    
    if not success then
        print("❌ Error in auto submit selected pets:", result)
    end
    
    isSubmittingPets = false
end

-- Pet Selection Dropdown
MutationGroupBox:AddDropdown("MutationPetSelection", {
    Values = AllNonDinoPets,
    Default = {},
    Multi = true,
    Text = "Select Pets to Submit",
    Tooltip = "Choose which pets to automatically submit for mutation when they reach age 50+",
    
    Callback = function(Value)
        SelectedPetsForMutation = Value
        
        local selectedCount = 0
        for _, selected in pairs(Value) do
            if selected then selectedCount = selectedCount + 1 end
        end
        
        if selectedCount > 0 then
            Library:Notify("🧬 Selected " .. selectedCount .. " pets for mutation", 2)
        else
            Library:Notify("🧬 No pets selected for mutation", 2)
        end
        
        print("[cb] Selected pets for mutation:", selectedCount)
    end,
})

-- Auto Submit Pet toggle
MutationGroupBox:AddToggle("AutoSubmitPet", {
    Text = "Auto Submit Selected Pets",
    Tooltip = "Automatically submit selected pets with age 50+ to mutation machine",
    Default = false,
    Callback = function(Value)
        AutoSubmitPetEnabled = Value
        print("[cb] Auto Submit Selected Pets toggled:", Value)
        
        if Value then
            if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
                Library:Notify("⚠️ Please select pets first using the dropdown above!", 4)
                Toggles.AutoSubmitPet:SetValue(false)
                return
            end
            
            local selectedCount = 0
            for _, selected in pairs(SelectedPetsForMutation) do
                if selected then selectedCount = selectedCount + 1 end
            end
            
            Library:Notify("🧬 Auto submit enabled for " .. selectedCount .. " selected pets (age 50+)!", 3)
            
            -- Start auto submit loop (check every 5 seconds)
            autoSubmitPetConnection = task.spawn(function()
                while AutoSubmitPetEnabled do
                    performAutoSubmitSelectedPets()
                    task.wait(5) -- Wait 5 seconds between checks
                end
            end)
        else
            Library:Notify("🧬 Auto submit selected pets disabled!", 3)
            
            -- Stop auto submit loop
            if autoSubmitPetConnection then
                task.cancel(autoSubmitPetConnection)
                autoSubmitPetConnection = nil
            end
            
            -- Reset submitting flag
            isSubmittingPets = false
        end
    end,
})

-- ================================================================
-- ZEN SYSTEM
-- ================================================================
local ZenGroupBox = EventTab:AddRightGroupbox("Zen 🧘")

-- Variables for Zen system
local AutoCollectTranquilEnabled = false
local autoCollectTranquilConnection = nil
local isCollectingTranquil = false

-- Function to get player's farm (copied from Main script)
local function getMyFarm()
    for _, farm in Services.Workspace.Farm:GetChildren() do
        local important = farm:FindFirstChild("Important")
        if important then
            local data = important:FindFirstChild("Data")
            if data and data.Owner.Value == LocalPlayer.Name then
                return farm
            end
        end
    end
    return nil
end

-- Function to check if a plant has TRANQUIL mutation
local function hasTranquilMutation(plant)
    if not plant then return false end
    
    -- Check for TRANQUIL mutation as StringValue object
    local tranquilObj = plant:FindFirstChild("Tranquil")
    if tranquilObj and tranquilObj:IsA("StringValue") then
        return true
    end
    
    -- Check for TRANQUIL mutation as attribute
    if plant:GetAttribute("Tranquil") then
        return true
    end
    
    return false
end

-- Function to check if plant can be harvested
local function canHarvestPlant(plant)
    if not plant or not plant.Parent then
        return false
    end
    
    -- Check for proximity prompt (indicates harvestable)
    local prompt = plant:FindFirstChild("ProximityPrompt", true)
    if not prompt or not prompt.Enabled then
        return false
    end
    
    return true
end

-- Function to harvest a specific plant
local function harvestTranquilPlant(plant)
    if not plant or not plant.Parent then
        return false
    end
    
    local prompt = plant:FindFirstChild("ProximityPrompt", true)
    if not prompt then
        return false
    end
    
    -- Teleport to plant position
    local plantPosition = plant:GetPivot().Position
    local optimalPosition = plantPosition + Vector3.new(0, 1, 0)
    
    -- Teleport to plant
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(optimalPosition)
    task.wait(0.5) -- Wait for teleport to register
    
    -- Fire proximity prompt to harvest
    local success, result = pcall(function()
        fireproximityprompt(prompt)
    end)
    
    if success then
        print("🧘 Harvested TRANQUIL plant:", plant.Name)
        Library:Notify("🧘 Harvested TRANQUIL: " .. plant.Name, 2)
        return true
    else
        print("❌ Failed to harvest TRANQUIL plant:", plant.Name, result)
        return false
    end
end

-- Function to get all TRANQUIL plants on farm
local function getTranquilPlantsOnFarm()
    local tranquilPlants = {}
    
    local myFarm = getMyFarm()
    if not myFarm then
        return tranquilPlants
    end
    
    -- Check if there's a nested Farm folder inside the main farm folder
    local innerFarm = myFarm:FindFirstChild("Farm")
    if innerFarm then
        myFarm = innerFarm
    end
    
    local important = myFarm:FindFirstChild("Important")
    if not important then
        return tranquilPlants
    end
    
    -- Double-check this is actually our farm by verifying owner
    local data = important:FindFirstChild("Data")
    if not data or not data:FindFirstChild("Owner") or data.Owner.Value ~= LocalPlayer.Name then
        return tranquilPlants
    end
    
    local plantsPhysical = important:FindFirstChild("Plants_Physical")
    if not plantsPhysical then
        return tranquilPlants
    end
    
    -- Search through all plants for TRANQUIL mutation
    for _, plant in pairs(plantsPhysical:GetChildren()) do
        if canHarvestPlant(plant) and hasTranquilMutation(plant) then
            table.insert(tranquilPlants, plant)
            print("🧘 Found TRANQUIL plant:", plant.Name)
        end
        
        -- Also check fruits within plants
        local fruits = plant:FindFirstChild("Fruits") or plant:FindFirstChild("Fruit") or plant:FindFirstChild("Fruit_Spawn")
        if fruits then
            for _, fruit in pairs(fruits:GetChildren()) do
                if canHarvestPlant(fruit) and hasTranquilMutation(fruit) then
                    table.insert(tranquilPlants, fruit)
                    print("🧘 Found TRANQUIL fruit:", fruit.Name, "from plant:", plant.Name)
                end
            end
        end
    end
    
    return tranquilPlants
end

-- Main auto collect TRANQUIL function
local function performAutoCollectTranquil()
    if not AutoCollectTranquilEnabled or isCollectingTranquil then
        return
    end
    
    -- Check if character exists
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    isCollectingTranquil = true
    
    local success, result = pcall(function()
        local tranquilPlants = getTranquilPlantsOnFarm()
        
        if #tranquilPlants == 0 then
            -- Only notify every 30 seconds to avoid spam
            local currentTime = tick()
            if not _G.LastTranquilCheck or currentTime - _G.LastTranquilCheck > 30 then
                print("🧘 No TRANQUIL plants found on farm")
                _G.LastTranquilCheck = currentTime
            end
            return
        end
        
        print("🧘 Found " .. #tranquilPlants .. " TRANQUIL plants to collect")
        Library:Notify("🧘 Found " .. #tranquilPlants .. " TRANQUIL plants!", 2)
        
        local harvestedCount = 0
        
        -- Collect each TRANQUIL plant
        for i, plant in pairs(tranquilPlants) do
            if not AutoCollectTranquilEnabled then
                break
            end
            
            -- Check if character still exists
            if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                break
            end
            
            -- Verify plant still exists and has TRANQUIL mutation
            if plant and plant.Parent and hasTranquilMutation(plant) then
                local success = harvestTranquilPlant(plant)
                if success then
                    harvestedCount = harvestedCount + 1
                    task.wait(0.5) -- Small delay between harvests
                end
            end
        end
        
        if harvestedCount > 0 then
            Library:Notify("🧘 Successfully collected " .. harvestedCount .. " TRANQUIL plants!", 3)
        end
    end)
    
    if not success then
        print("❌ Error in auto collect TRANQUIL:", result)
    end
    
    isCollectingTranquil = false
end

-- Auto Collect TRANQUIL Plants toggle
ZenGroupBox:AddToggle("AutoCollectTranquil", {
    Text = "Auto Collect Plants with TRANQUIL",
    Tooltip = "Automatically collect plants and fruits with TRANQUIL mutation on your farm",
    Default = false,
    Callback = function(Value)
        AutoCollectTranquilEnabled = Value
        print("[cb] Auto Collect TRANQUIL toggled:", Value)
        
        if Value then
            Library:Notify("🧘 Auto Collect TRANQUIL enabled!", 3)
            
            -- Start auto collect loop (check every 3 seconds)
            autoCollectTranquilConnection = task.spawn(function()
                while AutoCollectTranquilEnabled do
                    performAutoCollectTranquil()
                    task.wait(3) -- Wait 3 seconds between checks
                end
            end)
        else
            Library:Notify("🧘 Auto Collect TRANQUIL disabled!", 3)
            
            -- Stop auto collect loop
            if autoCollectTranquilConnection then
                task.cancel(autoCollectTranquilConnection)
                autoCollectTranquilConnection = nil
            end
            
            -- Reset collecting flag
            isCollectingTranquil = false
        end
    end,
})

ZenGroupBox:AddDivider()

-- ================================================================
-- ZEN SUBMISSION SYSTEM
-- ================================================================

-- Variables for Zen submission system
local SelectedZenMode = "ZEN SHOP"
local AutoSubmitZenEnabled = false
local autoSubmitZenConnection = nil
local isSubmittingZen = false

-- Remote events for Zen submission
local ZenQuestRemoteEvent = Services.ReplicatedStorage.GameEvents:FindFirstChild("ZenQuestRemoteEvent")
local ZenAuraRemoteEvent = Services.ReplicatedStorage.GameEvents:FindFirstChild("ZenAuraRemoteEvent")

-- Function to check if a plant/fruit has TRANQUIL mutation (enhanced detection)
local function hasTranquilMutationInInventory(item)
    if not item then return false end
    
    -- Method 1: Check for TRANQUIL mutation as StringValue object
    local tranquilObj = item:FindFirstChild("Tranquil")
    if tranquilObj and tranquilObj:IsA("StringValue") then
        print("🧘 Found TRANQUIL StringValue on:", item.Name)
        return true
    end
    
    -- Method 2: Check for TRANQUIL mutation as attribute
    if item:GetAttribute("Tranquil") then
        print("🧘 Found TRANQUIL attribute on:", item.Name)
        return true
    end
    
    -- Method 3: Check for TRANQUIL in item name (some items might have it in the name)
    if string.find(string.upper(item.Name), "TRANQUIL") then
        print("🧘 Found TRANQUIL in name:", item.Name)
        return true
    end
    
    -- Method 4: Check all child objects for any TRANQUIL references
    for _, child in pairs(item:GetChildren()) do
        if child.Name == "Tranquil" or string.find(string.upper(child.Name), "TRANQUIL") then
            print("🧘 Found TRANQUIL child object:", child.Name, "on item:", item.Name)
            return true
        end
        
        -- Check child values
        if child:IsA("StringValue") and string.find(string.upper(child.Value), "TRANQUIL") then
            print("🧘 Found TRANQUIL in child StringValue:", child.Name, "=", child.Value, "on item:", item.Name)
            return true
        end
    end
    
    -- Method 5: Check all attributes for TRANQUIL references
    for attrName, attrValue in pairs(item:GetAttributes()) do
        if string.find(string.upper(attrName), "TRANQUIL") or (type(attrValue) == "string" and string.find(string.upper(attrValue), "TRANQUIL")) then
            print("🧘 Found TRANQUIL in attribute:", attrName, "=", attrValue, "on item:", item.Name)
            return true
        end
    end
    
    return false
end

-- Function to get TRANQUIL plants from player's backpack
local function getTranquilPlantsFromBackpack()
    local tranquilPlants = {}
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    
    if not backpack then
        return tranquilPlants
    end
    
    -- Search through all tools in backpack
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- Check if this tool has TRANQUIL mutation
            if hasTranquilMutationInInventory(tool) then
                table.insert(tranquilPlants, tool)
                print("🧘 Found TRANQUIL plant in backpack:", tool.Name)
            end
        end
    end
    
    return tranquilPlants
end

-- Function to equip a specific plant tool
local function equipPlantTool(plantTool)
    local success, result = pcall(function()
        -- Make sure we have a character
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then
            return false
        end
        
        -- Check if plant is still in backpack
        if not plantTool or not plantTool.Parent or plantTool.Parent ~= LocalPlayer.Backpack then
            return false
        end
        
        -- Equip the plant
        LocalPlayer.Character.Humanoid:EquipTool(plantTool)
        print("🧘 Equipped plant:", plantTool.Name)
        
        -- Wait a moment for the equip to register
        task.wait(0.5)
        
        -- Verify plant is actually equipped
        local equippedPlant = LocalPlayer.Character:FindFirstChild(plantTool.Name)
        if equippedPlant then
            return true
        else
            return false
        end
    end)
    
    if not success then
        print("❌ Error equipping plant:", result)
        return false
    end
    
    return result
end

-- Function to submit held plant based on selected mode
local function submitHeldPlantForZen()
    local success, result = pcall(function()
        -- Check if we have a plant equipped
        local equippedPlant = nil
        if LocalPlayer.Character then
            equippedPlant = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        end
        
        if not equippedPlant then
            print("📭 No plant equipped to submit")
            return false
        end
        
        -- Submit based on selected mode
        if SelectedZenMode == "ZEN SHOP" then
            if not ZenAuraRemoteEvent then
                print("❌ ZenAuraRemoteEvent not found!")
                return false
            end
            
            ZenAuraRemoteEvent:FireServer("SubmitHeldPlant")
            print("🧘 Submitted plant to ZEN SHOP:", equippedPlant.Name)
            Library:Notify("🧘 ZEN SHOP: " .. equippedPlant.Name, 2)
            
        elseif SelectedZenMode == "ZEN CHANNELLER" then
            if not ZenQuestRemoteEvent then
                print("❌ ZenQuestRemoteEvent not found!")
                return false
            end
            
            ZenQuestRemoteEvent:FireServer("SubmitHeldPlant")
            print("🧘 Submitted plant to ZEN CHANNELLER:", equippedPlant.Name)
            Library:Notify("🧘 ZEN CHANNELLER: " .. equippedPlant.Name, 2)
        end
        
        return true
    end)
    
    if not success then
        print("❌ Error submitting plant for zen:", result)
        return false
    end
    
    return result
end

-- Function to unequip current plant (move back to backpack)
local function unequipCurrentPlant()
    local success, result = pcall(function()
        if not LocalPlayer.Character then
            return true
        end
        
        local equippedPlant = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        if equippedPlant then
            -- Move plant back to backpack
            equippedPlant.Parent = LocalPlayer.Backpack
            print("🧘 Unequipped plant:", equippedPlant.Name)
            task.wait(0.3) -- Wait for unequip to register
        end
        
        return true
    end)
    
    return success and result
end

-- Main function to auto submit TRANQUIL plants
local function performAutoSubmitZen()
    if not AutoSubmitZenEnabled or isSubmittingZen then
        return
    end
    
    -- Check if character exists
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    isSubmittingZen = true
    
    local success, result = pcall(function()
        local tranquilPlants = getTranquilPlantsFromBackpack()
        
        if #tranquilPlants == 0 then
            -- Only notify every 30 seconds to avoid spam
            local currentTime = tick()
            if not _G.LastZenSubmissionCheck or currentTime - _G.LastZenSubmissionCheck > 30 then
                print("🧘 No TRANQUIL plants found in backpack for " .. SelectedZenMode)
                _G.LastZenSubmissionCheck = currentTime
            end
            return
        end
        
        print("🧘 Found " .. #tranquilPlants .. " TRANQUIL plants to submit to " .. SelectedZenMode)
        Library:Notify("🧘 Found " .. #tranquilPlants .. " TRANQUIL plants for " .. SelectedZenMode .. "!", 2)
        
        local submittedCount = 0
        
        -- Submit each TRANQUIL plant
        for i, plantTool in pairs(tranquilPlants) do
            if not AutoSubmitZenEnabled then
                break
            end
            
            -- Check if character still exists
            if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                break
            end
            
            print("🧘 Processing TRANQUIL plant " .. i .. "/" .. #tranquilPlants .. ":", plantTool.Name)
            
            -- Unequip any currently equipped tool first
            unequipCurrentPlant()
            task.wait(0.5)
            
            -- Equip the plant
            local equipped = equipPlantTool(plantTool)
            if equipped then
                task.wait(0.5) -- Wait for equip to fully register
                
                -- Submit the plant
                local submitted = submitHeldPlantForZen()
                if submitted then
                    submittedCount = submittedCount + 1
                    task.wait(1) -- Wait between submissions
                else
                    print("❌ Failed to submit plant:", plantTool.Name)
                end
            else
                print("❌ Failed to equip plant:", plantTool.Name)
            end
            
            -- Small delay between plants
            task.wait(0.5)
        end
        
        if submittedCount > 0 then
            Library:Notify("🧘 Successfully submitted " .. submittedCount .. " TRANQUIL plants to " .. SelectedZenMode .. "!", 3)
        end
    end)
    
    if not success then
        print("❌ Error in auto submit zen:", result)
    end
    
    isSubmittingZen = false
end

-- Zen Mode Selection Dropdown
ZenGroupBox:AddDropdown("ZenModeSelection", {
    Values = {"ZEN SHOP", "ZEN CHANNELLER"},
    Default = "ZEN SHOP",
    Multi = false,
    Text = "Select Zen Mode",
    Tooltip = "Choose which Zen system to submit TRANQUIL plants to:\n• ZEN SHOP: Uses ZenAuraRemoteEvent\n• ZEN CHANNELLER: Uses ZenQuestRemoteEvent",
    
    Callback = function(Value)
        SelectedZenMode = Value
        print("[cb] Selected Zen mode:", Value)
        Library:Notify("🧘 Selected mode: " .. Value, 2)
    end,
})

-- Auto Submit Zen toggle
ZenGroupBox:AddToggle("AutoSubmitZen", {
    Text = "Auto Submit TRANQUIL Plants",
    Tooltip = "Automatically submit TRANQUIL plants from your backpack to the selected Zen system",
    Default = false,
    Callback = function(Value)
        AutoSubmitZenEnabled = Value
        print("[cb] Auto Submit Zen toggled:", Value)
        
        if Value then
            Library:Notify("🧘 Auto submit " .. SelectedZenMode .. " enabled!", 3)
            
            -- Start auto submit loop (check every 5 seconds)
            autoSubmitZenConnection = task.spawn(function()
                while AutoSubmitZenEnabled do
                    performAutoSubmitZen()
                    task.wait(5) -- Wait 5 seconds between checks
                end
            end)
        else
            Library:Notify("🧘 Auto submit " .. SelectedZenMode .. " disabled!", 3)
            
            -- Stop auto submit loop
            if autoSubmitZenConnection then
                task.cancel(autoSubmitZenConnection)
                autoSubmitZenConnection = nil
            end
            
            -- Reset submitting flag
            isSubmittingZen = false
        end
    end,
})

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("🎉 Event Tab initialized successfully!")
Library:Notify("🥚 AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
