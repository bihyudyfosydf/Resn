-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("✅ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("❌ Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch 🥚")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("🥚 Hatched:", eggName)
        Library:Notify("🥚 Hatched: " .. eggName, 2)
        return true
    else
        print("❌ PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("⚠️ Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("🥚 Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("🥚 Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("🥚 Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("🦕 Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("🥚 All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- MUTATION SYSTEM
-- ================================================================
local MutationGroupBox = EventTab:AddLeftGroupbox("Mutation 🧬")

-- Variables for Mutation system
local AutoSubmitPetEnabled = false
local autoSubmitPetConnection = nil
local isSubmittingPets = false
local SelectedPetsForMutation = {}

-- Complete list of all non-dino pets from the game (excluding dino pets)
local AllNonDinoPets = {
    -- Basic Pets
    "Dog",
    "Golden Lab",
    "Bunny",
    "Black Bunny",
    "Cat",
    "Orange Tabby",
    "Deer",
    "Spotted Deer",
    "Monkey",
    "Silver Monkey",
    "Chicken",
    "Rooster",
    "Pig",
    "Turtle",
    "Cow",

    -- Rare & Mythical Pets
    "Snail",
    "Giant Ant",
    "Dragonfly",
    "Polar Bear",
    "Panda",
    "Sea Otter",
    "Caterpillar",
    "Praying Mantis",
    "Hedgehog",
    "Kiwi",
    "Mole",
    "Frog",
    "Echo Frog",
    "Owl",
    "Night Owl",
    "Raccoon",
    "Grey Mouse",
    "Squirrel",
    "Brown Mouse",
    "Red Giant Ant",
    "Red Fox",

    -- Event/Special Pets
    "Chicken Zombie",
    "Blood Hedgehog",
    "Blood Kiwi",
    "Blood Owl",
    "Moon Cat",

    -- Flying/Bee Pets
    "Bee",
    "Honey Bee",
    "Petal Bee",
    "Golden Bee",
    "Bear Bee",
    "Queen Bee",
    "Wasp",
    "Tarantula Hawk",
    "Moth",
    "Butterfly",
    "Disco Bee",
    "Pack Bee",

    -- Other Flying Pets
    "Firefly",
    "Red Dragon",
    "Cooked Owl",

    -- Aquatic Pets
    "Starfish",
    "Crab",
    "Seagull",
    "Toucan",
    "Flamingo",
    "Sea Turtle",
    "Seal",

    -- Land Animals
    "Orangutan",
    "Peacock",
    "Capybara",
    "Scarlet Macaw",
    "Ostrich",
    "Mimic Octopus",
    "Meerkat",
    "Sand Snake",
    "Axolotl",
    "Hyacinth Macaw",
    "Fennec Fox",
    "Hamster",
}

-- Get the PetMutationMachineService remote
local PetMutationMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetMutationMachineService_RE")

-- Function to check if a pet name matches any selected pets
local function isPetSelected(petName)
    if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
        return false -- If no pets selected, don't submit any
    end
    
    -- Check exact matches first
    if SelectedPetsForMutation[petName] then
        return true
    end
    
    -- Check partial matches (in case pet names in inventory have prefixes/suffixes)
    for selectedPet, isSelected in pairs(SelectedPetsForMutation) do
        if isSelected then
            if string.find(petName, selectedPet) or string.find(selectedPet, petName) then
                return true
            end
        end
    end
    
    return false
end

-- Function to get selected pets in inventory with level 50 or above
local function getSelectedEligiblePetsForMutation()
    local eligiblePets = {}
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    
    if not backpack then
        return eligiblePets
    end
    
    -- Check all tools in backpack for selected pets with age 50+
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- Check if it's a selected pet and has age 50+
            local petAge = tool:GetAttribute("Age")
            
            if petAge and tonumber(petAge) and tonumber(petAge) >= 50 then
                -- Check if this pet is in our selected list
                if isPetSelected(tool.Name) then
                    table.insert(eligiblePets, tool)
                    print("🧬 Found selected eligible pet:", tool.Name, "- Age:", petAge)
                end
            elseif isPetSelected(tool.Name) then
                print("🧬 Found selected pet but age too low:", tool.Name, "- Age:", petAge or "unknown")
            end
        end
    end
    
    return eligiblePets
end

-- Function to equip a specific pet tool
local function equipPet(petTool)
    local success, result = pcall(function()
        -- Make sure we have a character
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then
            return false
        end
        
        -- Check if pet is still in backpack
        if not petTool or not petTool.Parent or petTool.Parent ~= LocalPlayer.Backpack then
            return false
        end
        
        -- Equip the pet
        LocalPlayer.Character.Humanoid:EquipTool(petTool)
        print("🧬 Equipped pet:", petTool.Name)
        
        -- Wait a moment for the equip to register
        task.wait(0.5)
        
        -- Verify pet is actually equipped
        local equippedPet = LocalPlayer.Character:FindFirstChild(petTool.Name)
        if equippedPet then
            return true
        else
            return false
        end
    end)
    
    if not success then
        print("❌ Error equipping pet:", result)
        return false
    end
    
    return result
end

-- Function to submit the currently held pet
local function submitHeldPet()
    local success, result = pcall(function()
        if not PetMutationMachineService_RE then
            print("❌ PetMutationMachineService_RE not found!")
            return false
        end
        
        -- Check if we have a pet equipped
        local equippedPet = nil
        if LocalPlayer.Character then
            equippedPet = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        end
        
        if not equippedPet then
            print("📭 No pet equipped to submit")
            return false
        end
        
        -- Submit the held pet
        PetMutationMachineService_RE:FireServer("SubmitHeldPet")
        print("🧬 Submitted pet:", equippedPet.Name)
        Library:Notify("🧬 Submitted pet: " .. equippedPet.Name, 2)
        
        return true
    end)
    
    if not success then
        print("❌ Error submitting pet:", result)
        return false
    end
    
    return result
end

-- Function to unequip current pet (move back to backpack)
local function unequipCurrentPet()
    local success, result = pcall(function()
        if not LocalPlayer.Character then
            return true
        end
        
        local equippedPet = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        if equippedPet then
            -- Move pet back to backpack
            equippedPet.Parent = LocalPlayer.Backpack
            print("🧬 Unequipped pet:", equippedPet.Name)
            task.wait(0.3) -- Wait for unequip to register
        end
        
        return true
    end)
    
    return success and result
end

-- Main function to auto submit selected eligible pets
local function performAutoSubmitSelectedPets()
    if not AutoSubmitPetEnabled or isSubmittingPets then
        return
    end
    
    -- Check if any pets are selected
    if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
        local currentTime = tick()
        if not _G.LastPetSelectionCheck or currentTime - _G.LastPetSelectionCheck > 30 then
            print("📭 No pets selected for mutation")
            _G.LastPetSelectionCheck = currentTime
        end
        return
    end
    
    isSubmittingPets = true
    
    local success, result = pcall(function()
        -- Get selected eligible pets (age 50+ and in selection)
        local eligiblePets = getSelectedEligiblePetsForMutation()
        
        if #eligiblePets == 0 then
            -- Only notify every 30 seconds to avoid spam
            local currentTime = tick()
            if not _G.LastSelectedPetMutationCheck or currentTime - _G.LastSelectedPetMutationCheck > 30 then
                print("📭 No selected pets with age 50+ found for mutation")
                _G.LastSelectedPetMutationCheck = currentTime
            end
            return false
        end
        
        print("🧬 Found " .. #eligiblePets .. " selected eligible pets for mutation")
        Library:Notify("🧬 Found " .. #eligiblePets .. " selected pets ready for mutation!", 2)
        
        local submittedCount = 0
        
        -- Process each eligible pet
        for i, petTool in pairs(eligiblePets) do
            if not AutoSubmitPetEnabled then
                break
            end
            
            print("🧬 Processing selected pet " .. i .. "/" .. #eligiblePets .. ":", petTool.Name)
            
            -- Unequip any currently equipped pet first
            unequipCurrentPet()
            task.wait(0.5)
            
            -- Equip the pet
            local equipped = equipPet(petTool)
            if equipped then
                task.wait(0.5) -- Wait for equip to fully register
                
                -- Submit the pet
                local submitted = submitHeldPet()
                if submitted then
                    submittedCount = submittedCount + 1
                    task.wait(1) -- Wait between submissions
                else
                    print("❌ Failed to submit pet:", petTool.Name)
                end
            else
                print("❌ Failed to equip pet:", petTool.Name)
            end
            
            -- Small delay between pets
            task.wait(0.5)
        end
        
        if submittedCount > 0 then
            Library:Notify("🧬 Successfully submitted " .. submittedCount .. " selected pets for mutation!", 3)
        end
        
        return true
    end)
    
    if not success then
        print("❌ Error in auto submit selected pets:", result)
    end
    
    isSubmittingPets = false
end

-- Pet Selection Dropdown
MutationGroupBox:AddDropdown("MutationPetSelection", {
    Values = AllNonDinoPets,
    Default = {},
    Multi = true,
    Text = "Select Pets to Submit",
    Tooltip = "Choose which pets to automatically submit for mutation when they reach age 50+",
    
    Callback = function(Value)
        SelectedPetsForMutation = Value
        
        local selectedCount = 0
        for _, selected in pairs(Value) do
            if selected then selectedCount = selectedCount + 1 end
        end
        
        if selectedCount > 0 then
            Library:Notify("🧬 Selected " .. selectedCount .. " pets for mutation", 2)
        else
            Library:Notify("🧬 No pets selected for mutation", 2)
        end
        
        print("[cb] Selected pets for mutation:", selectedCount)
    end,
})

-- Auto Submit Pet toggle
MutationGroupBox:AddToggle("AutoSubmitPet", {
    Text = "Auto Submit Selected Pets",
    Tooltip = "Automatically submit selected pets with age 50+ to mutation machine",
    Default = false,
    Callback = function(Value)
        AutoSubmitPetEnabled = Value
        print("[cb] Auto Submit Selected Pets toggled:", Value)
        
        if Value then
            if not SelectedPetsForMutation or not next(SelectedPetsForMutation) then
                Library:Notify("⚠️ Please select pets first using the dropdown above!", 4)
                Toggles.AutoSubmitPet:SetValue(false)
                return
            end
            
            local selectedCount = 0
            for _, selected in pairs(SelectedPetsForMutation) do
                if selected then selectedCount = selectedCount + 1 end
            end
            
            Library:Notify("🧬 Auto submit enabled for " .. selectedCount .. " selected pets (age 50+)!", 3)
            
            -- Start auto submit loop (check every 5 seconds)
            autoSubmitPetConnection = task.spawn(function()
                while AutoSubmitPetEnabled do
                    performAutoSubmitSelectedPets()
                    task.wait(5) -- Wait 5 seconds between checks
                end
            end)
        else
            Library:Notify("🧬 Auto submit selected pets disabled!", 3)
            
            -- Stop auto submit loop
            if autoSubmitPetConnection then
                task.cancel(autoSubmitPetConnection)
                autoSubmitPetConnection = nil
            end
            
            -- Reset submitting flag
            isSubmittingPets = false
        end
    end,
})

-- ================================================================
-- ZEN SYSTEM - AUTO COLLECT TRANQUIL PLANTS
-- ================================================================
local ZenGroupBox = EventTab:AddRightGroupbox("Zen 🧘")

-- Variables for Zen system
local AutoCollectTranquilEnabled = false
local autoCollectTranquilConnection = nil
local isCollectingTranquil = false

-- Function to get my farm (borrowed from main file logic)
local function getMyFarm()
    local success, result = pcall(function()
        local workspace = Services.Workspace
        local farmName = LocalPlayer.Name .. "'s Farm"
        
        -- Check if farm exists in workspace
        local farm = workspace:FindFirstChild(farmName)
        if farm then
            return farm
        end
        
        -- Fallback: look for any farm owned by the player
        for _, obj in pairs(workspace:GetChildren()) do
            if string.find(obj.Name, LocalPlayer.Name) and string.find(obj.Name, "Farm") then
                return obj
            end
        end
        
        return nil
    end)
    
    if success then
        return result
    else
        print("❌ Error getting farm:", result)
        return nil
    end
end

-- Function to check if plant has TRANQUIL mutation (using proper mutation detection)
local function hasTranquilMutation(plant)
    if not plant then return false end
    
    -- Check for TRANQUIL as StringValue object (primary method for mutations)
    local tranquilObj = plant:FindFirstChild("TRANQUIL")
    if tranquilObj and tranquilObj:IsA("StringValue") then
        print("🧘 Found TRANQUIL mutation StringValue on", plant.Name)
        return true
    end
    
    -- Fallback: Check for TRANQUIL as attribute (secondary method)
    local tranquilAttr = plant:GetAttribute("TRANQUIL")
    if tranquilAttr then
        print("🧘 Found TRANQUIL mutation attribute on", plant.Name)
        return true
    end
    
    return false
end

-- Function to check if plant can be harvested
local function canHarvestTranquilPlant(plant)
    local prompt = plant:FindFirstChild("ProximityPrompt", true)
    if not prompt then
        return false
    end
    if not prompt.Enabled then
        return false
    end
    return true
end

-- Function to harvest a tranquil plant (based on main file's HarvestPlant function)
local function harvestTranquilPlant(plant)
    if not plant or not plant.Parent then
        print("❌ Plant object invalid or already removed")
        return false
    end

    local prompt = plant:FindFirstChild("ProximityPrompt", true)
    if not prompt then
        print("❌ No ProximityPrompt found on plant")
        return false
    end

    -- Ensure we have a character and root part
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        print("❌ Character not ready for harvest")
        return false
    end

    -- Store plant identification data
    local targetPlant = plant
    local targetPlantName = plant.Name
    local targetPlantParent = plant.Parent
    local targetPlantPosition = plant:GetPivot().Position
    local plantUID = tostring(plant)

    print("🧘 ZEN HARVEST: Targeting", targetPlantName, "at", targetPlantPosition, "UID:", plantUID)

    -- Verify plant has TRANQUIL mutation
    if not hasTranquilMutation(targetPlant) then
        print("❌ Plant no longer has TRANQUIL mutation - ABORTING")
        return false
    end

    -- Get optimal position near the plant
    local plantPosition = plant:GetPivot().Position
    local optimalPosition = plantPosition + Vector3.new(0, 2, 0)

    -- Enable noclip for teleportation
    local function enableNoclip()
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    if part.Name ~= "HumanoidRootPart" then
                        part.Massless = true
                    end
                end
            end
        end
    end

    enableNoclip()

    -- Teleport to optimal position for collection
    print("🚀 ZEN: Teleporting to", optimalPosition)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(optimalPosition)
    task.wait(0.5)

    -- Verify plant still exists after teleport
    if not targetPlant or not targetPlant.Parent or targetPlant.Parent ~= targetPlantParent then
        print("❌ Target plant disappeared or moved after teleport - ABORTING")
        return false
    end

    -- Get even closer to ensure proximity trigger
    local closePosition = plantPosition + Vector3.new(0, 0.5, 0)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(closePosition)
    task.wait(0.3)

    -- Verify distance to target plant is reasonable
    local currentDistance = (LocalPlayer.Character.HumanoidRootPart.Position - targetPlantPosition).Magnitude
    if currentDistance > 8 then
        print("❌ Too far from target plant after positioning! Distance:", currentDistance)
        return false
    end

    -- Check if prompt is still enabled after positioning
    if not prompt.Enabled then
        print("❌ ProximityPrompt disabled after positioning")
        return false
    end

    -- Try fireproximityprompt multiple times for better reliability
    local success = false
    local maxAttempts = 3

    for attempt = 1, maxAttempts do
        -- Re-verify target before each attempt
        if not targetPlant or not targetPlant.Parent then
            print("❌ Target plant no longer exists at attempt", attempt)
            break
        end

        print("🔄 ZEN: Harvest attempt", attempt, "on", targetPlantName)

        local attemptSuccess = pcall(function()
            local currentPrompt = targetPlant:FindFirstChild("ProximityPrompt", true)
            if not currentPrompt then
                error("Prompt disappeared during harvest attempt")
            end

            if not hasTranquilMutation(targetPlant) then
                error("Plant lost TRANQUIL mutation during harvest attempt")
            end

            fireproximityprompt(currentPrompt)
        end)

        if attemptSuccess then
            task.wait(0.3)

            -- Check if the plant still exists (successful collection removes it)
            if not targetPlant.Parent then
                success = true
                print("✅ ZEN: Successfully harvested TRANQUIL plant:", targetPlantName)
                break
            end
        else
            print("⚠️ ZEN: Attempt", attempt, "failed safety checks for", targetPlantName)
        end

        -- If not successful and not the last attempt, try repositioning
        if not success and attempt < maxAttempts then
            if targetPlant and targetPlant.Parent and targetPlant.Name == targetPlantName then
                local retryPosition = plantPosition + Vector3.new(0.2, 0.3, 0.2)
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(retryPosition)
                task.wait(0.2)
            else
                print("❌ Target invalid for repositioning, stopping attempts")
                break
            end
        end
    end

    -- Final check
    if not targetPlant.Parent then
        success = true
        print("✅ ZEN: Confirmed successful harvest of TRANQUIL plant:", targetPlantName)
    else
        print("❌ ZEN: Failed to harvest TRANQUIL plant:", targetPlantName, "after", maxAttempts, "attempts")
    end

    return success
end

-- Function to get all TRANQUIL plants in farm
local function getTranquilPlants()
    local tranquilPlants = {}
    
    local success, result = pcall(function()
        local myFarm = getMyFarm()
        if not myFarm then
            print("❌ Could not find player's farm")
            return {}
        end
        
        -- Check if there's a nested Farm folder inside the main farm folder
        local innerFarm = myFarm:FindFirstChild("Farm")
        if innerFarm then
            myFarm = innerFarm
        end

        local important = myFarm:FindFirstChild("Important")
        if not important then
            print("❌ Could not find Important folder in farm")
            return {}
        end
        
        -- Verify this is actually our farm by checking owner
        local data = important:FindFirstChild("Data")
        if not data or not data:FindFirstChild("Owner") or data.Owner.Value ~= LocalPlayer.Name then
            print("❌ Farm ownership verification failed")
            return {}
        end
        
        local plantsPhysical = important:FindFirstChild("Plants_Physical")
        if not plantsPhysical then
            print("❌ Could not find Plants_Physical folder")
            return {}
        end
        
        -- Search through all plants for TRANQUIL mutation
        for _, plant in pairs(plantsPhysical:GetChildren()) do
            if hasTranquilMutation(plant) and canHarvestTranquilPlant(plant) then
                table.insert(tranquilPlants, plant)
                print("🧘 Found TRANQUIL plant:", plant.Name)
            end
            
            -- Also check fruits inside plants
            local fruits = plant:FindFirstChild("Fruits") 
                        or plant:FindFirstChild("Fruit")
                        or plant:FindFirstChild("Fruit_Spawn")
            if fruits then
                for _, fruit in pairs(fruits:GetChildren()) do
                    if hasTranquilMutation(fruit) and canHarvestTranquilPlant(fruit) then
                        table.insert(tranquilPlants, fruit)
                        print("🧘 Found TRANQUIL fruit:", fruit.Name, "from plant:", plant.Name)
                    end
                end
            end
        end
        
        return tranquilPlants
    end)
    
    if success then
        return result
    else
        print("❌ Error getting TRANQUIL plants:", result)
        return {}
    end
end

-- Function to restore character physics
local function restoreCharacterPhysics()
    pcall(function()
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    if part.Name ~= "HumanoidRootPart" then
                        part.CanCollide = true
                        part.Massless = false
                    end
                end
            end
            
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.PlatformStand = false
            end
        end
    end)
end

-- Main function to collect all TRANQUIL plants
local function collectAllTranquilPlants()
    if not AutoCollectTranquilEnabled or isCollectingTranquil then
        return
    end
    
    isCollectingTranquil = true
    
    local success, result = pcall(function()
        print("🧘 ZEN: Starting TRANQUIL plant collection...")
        
        -- Check if character exists
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            print("❌ Character not ready!")
            return
        end
        
        -- Get all TRANQUIL plants
        local tranquilPlants = getTranquilPlants()
        
        if #tranquilPlants == 0 then
            local currentTime = tick()
            if not _G.LastTranquilCheck or currentTime - _G.LastTranquilCheck > 30 then
                print("📭 No TRANQUIL plants found to collect")
                Library:Notify("🧘 No TRANQUIL plants found to collect", 2)
                _G.LastTranquilCheck = currentTime
            end
            return
        end
        
        print("🧘 Found", #tranquilPlants, "TRANQUIL plants to collect")
        Library:Notify("🧘 Found " .. #tranquilPlants .. " TRANQUIL plants! Starting collection...", 3)
        
        local harvestedCount = 0
        
        -- Process each TRANQUIL plant
        for i, plant in pairs(tranquilPlants) do
            if not AutoCollectTranquilEnabled then
                break
            end
            
            -- Check if character still exists
            if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                print("❌ Character was lost during collection! Stopping...")
                break
            end
            
            -- Check if plant still exists and has TRANQUIL mutation
            if not plant or not plant.Parent or not hasTranquilMutation(plant) then
                print("⚠️ TRANQUIL plant", i, "no longer exists or lost mutation, skipping...")
                continue
            end
            
            print("🧘 Processing TRANQUIL plant", i, "of", #tranquilPlants .. ":", plant.Name)
            
            -- Harvest the TRANQUIL plant
            local harvestSuccess = harvestTranquilPlant(plant)
            
            if harvestSuccess then
                harvestedCount = harvestedCount + 1
                Library:Notify("✅ Collected TRANQUIL " .. plant.Name, 1)
                print("✅ Successfully collected TRANQUIL plant:", plant.Name)
            else
                print("❌ Failed to collect TRANQUIL plant:", plant.Name)
            end
            
            -- Small delay between collections
            task.wait(0.2)
        end
        
        -- Restore physics after collection
        restoreCharacterPhysics()
        
        print("🧘 ZEN: TRANQUIL collection completed!")
        print("Collected", harvestedCount, "out of", #tranquilPlants, "TRANQUIL plants")
        
        if harvestedCount > 0 then
            Library:Notify("🧘 Collected " .. harvestedCount .. " TRANQUIL plants successfully!", 3)
        end
        
        return true
    end)
    
    if not success then
        print("❌ Error in TRANQUIL plant collection:", result)
        Library:Notify("❌ TRANQUIL collection error: " .. tostring(result), 3)
        restoreCharacterPhysics()
    end
    
    isCollectingTranquil = false
end

-- Auto Collect TRANQUIL Plants toggle
ZenGroupBox:AddToggle("AutoCollectTranquil", {
    Text = "Auto Collect TRANQUIL Plants",
    Tooltip = "Automatically collect all plants and fruits with the TRANQUIL mutation in your farm",
    Default = false,
    Callback = function(Value)
        AutoCollectTranquilEnabled = Value
        print("[cb] Auto Collect TRANQUIL Plants toggled:", Value)
        
        if Value then
            Library:Notify("🧘 Auto collect TRANQUIL plants enabled!", 3)
            
            -- Start auto collect loop (check every 3 seconds)
            autoCollectTranquilConnection = task.spawn(function()
                while AutoCollectTranquilEnabled do
                    collectAllTranquilPlants()
                    task.wait(3) -- Wait 3 seconds between collection cycles
                end
            end)
        else
            Library:Notify("🧘 Auto collect TRANQUIL plants disabled!", 3)
            
            -- Stop auto collect loop
            if autoCollectTranquilConnection then
                task.cancel(autoCollectTranquilConnection)
                autoCollectTranquilConnection = nil
            end
            
            -- Reset collecting flag
            isCollectingTranquil = false
            
            -- Restore physics
            restoreCharacterPhysics()
        end
    end,
})

-- Manual collect button
ZenGroupBox:AddButton("🧘 Collect TRANQUIL Plants Now", function()
    if isCollectingTranquil then
        Library:Notify("⚠️ TRANQUIL collection already in progress!", 2)
        return
    end
    
    collectAllTranquilPlants()
end)

-- Show TRANQUIL Plants button
ZenGroupBox:AddButton("📊 Show TRANQUIL Plants", function()
    local tranquilPlants = getTranquilPlants()
    
    if #tranquilPlants == 0 then
        Library:Notify("📭 No TRANQUIL plants found in farm", 3)
    else
        local plantNames = {}
        for _, plant in pairs(tranquilPlants) do
            table.insert(plantNames, plant.Name)
        end
        
        local uniquePlants = {}
        local seen = {}
        for _, name in pairs(plantNames) do
            if not seen[name] then
                seen[name] = true
                table.insert(uniquePlants, name)
            end
        end
        
        Library:Notify("🧘 Found " .. #tranquilPlants .. " TRANQUIL plants: " .. table.concat(uniquePlants, ", "), 5)
        print("🧘 TRANQUIL plants found:")
        for i, plant in pairs(tranquilPlants) do
            print("  " .. i .. ". " .. plant.Name)
        end
    end
end)

-- Debug button to scan all plants and show their mutations
ZenGroupBox:AddButton("🔍 Debug: Scan All Plant Mutations", function()
    local success, result = pcall(function()
        print("🔍 DEBUG: Starting plant mutation scan...")
        
        local myFarm = getMyFarm()
        if not myFarm then
            print("❌ Could not find player's farm")
            return
        end
        
        -- Check if there's a nested Farm folder inside the main farm folder
        local innerFarm = myFarm:FindFirstChild("Farm")
        if innerFarm then
            myFarm = innerFarm
        end

        local important = myFarm:FindFirstChild("Important")
        if not important then
            print("❌ Could not find Important folder in farm")
            return
        end
        
        local plantsPhysical = important:FindFirstChild("Plants_Physical")
        if not plantsPhysical then
            print("❌ Could not find Plants_Physical folder")
            return
        end
        
        print("🔍 Scanning all plants for mutations...")
        local totalPlants = 0
        local plantsWithMutations = 0
        local tranquilCount = 0
        
        for _, plant in pairs(plantsPhysical:GetChildren()) do
            totalPlants = totalPlants + 1
            print("🔍 Plant:", plant.Name)
            
            -- Check for any StringValue children (mutations)
            local hasMutations = false
            for _, child in pairs(plant:GetChildren()) do
                if child:IsA("StringValue") then
                    print("  📜 StringValue mutation:", child.Name, "=", child.Value)
                    hasMutations = true
                    if child.Name == "TRANQUIL" then
                        tranquilCount = tranquilCount + 1
                        print("  🧘 FOUND TRANQUIL MUTATION!")
                    end
                end
            end
            
            -- Check for attributes
            local attributes = plant:GetAttributes()
            for attrName, attrValue in pairs(attributes) do
                print("  🏷️ Attribute:", attrName, "=", attrValue)
                if attrName == "TRANQUIL" then
                    tranquilCount = tranquilCount + 1
                    print("  🧘 FOUND TRANQUIL ATTRIBUTE!")
                end
            end
            
            if hasMutations then
                plantsWithMutations = plantsWithMutations + 1
            end
            
            -- Also check fruits
            local fruits = plant:FindFirstChild("Fruits") 
                        or plant:FindFirstChild("Fruit")
                        or plant:FindFirstChild("Fruit_Spawn")
            if fruits then
                print("  🍓 Checking fruits in:", plant.Name)
                for _, fruit in pairs(fruits:GetChildren()) do
                    print("    Fruit:", fruit.Name)
                    for _, child in pairs(fruit:GetChildren()) do
                        if child:IsA("StringValue") then
                            print("      📜 Fruit StringValue mutation:", child.Name, "=", child.Value)
                            if child.Name == "TRANQUIL" then
                                tranquilCount = tranquilCount + 1
                                print("      🧘 FOUND TRANQUIL MUTATION ON FRUIT!")
                            end
                        end
                    end
                    
                    local fruitAttributes = fruit:GetAttributes()
                    for attrName, attrValue in pairs(fruitAttributes) do
                        print("      🏷️ Fruit Attribute:", attrName, "=", attrValue)
                        if attrName == "TRANQUIL" then
                            tranquilCount = tranquilCount + 1
                            print("      🧘 FOUND TRANQUIL ATTRIBUTE ON FRUIT!")
                        end
                    end
                end
            end
            
            print("") -- Empty line for readability
        end
        
        print("🔍 DEBUG SUMMARY:")
        print("Total plants scanned:", totalPlants)
        print("Plants with mutations:", plantsWithMutations)
        print("TRANQUIL mutations/attributes found:", tranquilCount)
        
        Library:Notify("🔍 Debug scan complete! Found " .. tranquilCount .. " TRANQUIL mutations out of " .. totalPlants .. " plants. Check console for details.", 5)
    end)
    
    if not success then
        print("❌ Error in debug scan:", result)
        Library:Notify("❌ Debug scan error: " .. tostring(result), 3)
    end
end)

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("🎉 Event Tab initialized successfully!")
Library:Notify("🥚 AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
